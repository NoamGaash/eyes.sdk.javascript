name: JS Test
description: Test JS package
inputs:
  working-directory:
    description: the path to the directory from repository root
    type: string
    required: true
  framework-version:
    description: version of the framework
    type: string
  test-type:
    description: type of the testing (unit, it, e2e, coverage)
    type: string
  build-type:
    description: type of the build script
    type: string
  setup-type:
    description: type of the setup script
    type: string
  grep:
    description: grep pattern to filter tests
    type: string
  parallel:
    description: number of parallel processes to run tests
    type: number
  shell:
    description: shell to use
    type: string
    default: bash

runs:
  using: composite
  steps:
    - name: Install global tools
      working-directory: ${{inputs.working-directory}}
      shell: ${{inputs.shell}}
      run: |
        if [ -f "/etc/alpine-release" ]; then apk add --no-cache curl jq; fi
    - name: Install dependencies
      working-directory: ${{inputs.working-directory}}
      shell: ${{inputs.shell}}
      run: |
        yarn workspaces focus $(jq -r .name ./package.json) root
        if [ ! -z "${{inputs.framework-version}}" ]
        then
          export APPLITOOLS_FRAMEWORK_VERSION=${{inputs.framework-version}}
          echo APPLITOOLS_FRAMEWORK_VERSION=${{inputs.framework-version}} >> $GITHUB_ENV
          export APPLITOOLS_FRAMEWORK_MAJOR_VERSION=${{inputs.framework-version}}
          echo APPLITOOLS_FRAMEWORK_MAJOR_VERSION=${{inputs.framework-version}} >> $GITHUB_ENV
          if [ "$(jq -r '.scripts["up:framework"]' ./package.json)" != "null" ]; then yarn run up:framework; fi
        fi
    - name: Setting up test environment
      if: ${{inputs.setup-type != 'none'}}
      working-directory: ${{inputs.working-directory}}
      shell: ${{inputs.shell}}
      run: |
        if [ ! -z "${{inputs.setup-type}}" ]; then yarn setup:${{inputs.setup-type}}; elif [ "$(jq -r .scripts.setup ./package.json)" != "null" ]; then yarn setup; fi
        if [ -e .env ]; then cat .env >> $GITHUB_ENV; fi
    - name: Build package
      if: ${{inputs.build-type != 'none'}}
      working-directory: ${{inputs.working-directory}}
      shell: ${{inputs.shell}}
      run: |
        yarn workspaces foreach --topological-dev --recursive --parallel --from $(jq -r .name ./package.json) run build
        if [ ! -z "${{inputs.build-type}}" ]; then yarn run build:${{inputs.build-type}}; fi
    - name: Run tests
      working-directory: ${{inputs.working-directory}}
      shell: ${{inputs.shell}}
      run: |
        if [ ! -z "${{inputs.grep}}" ]; then export MOCHA_GREP=${{inputs.grep}}; fi
        if [ ! -z "${{inputs.parallel}}" ]; then export MOCHA_JOBS=${{inputs.parallel}}; fi
        if [ ! -z "${{inputs.test-type}}" ]; then yarn test:${{inputs.test-type}}; elif [ "$(jq -r .scripts.test ./package.json)" != "null" ]; then yarn test; fi
