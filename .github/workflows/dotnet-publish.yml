name: "DotNet - Deploy"

on:
  workflow_dispatch:
     inputs:
      run_tests:
        description: Run tests
        type: boolean
        required: false
        default: false
      core_version:
        description: Core version
        type: string
        required: true
        default: "3.6.2"
      core_nuget_version:
        description: Core NuGet version
        type: string
        required: false
        default: "3.6.2"

env:
  DRIVER_PATH: /usr/bin
  APPLITOOLS_API_KEY: ${{ secrets.APPLITOOLS_API_KEY }}
  APPLITOOLS_API_KEY_READ: ${{ secrets.APPLITOOLS_API_KEY_READ }}
  SAUCE_USERNAME: ${{ secrets.SAUCE_USERNAME }}
  SAUCE_ACCESS_KEY: ${{ secrets.SAUCE_ACCESS_KEY }}
  GITHUB_TOKEN: ${{ secrets.RUN_GITHUB_TOKEN }}
  CORE_VERSION: ${{ inputs.core_version }}
  CORE_NUGET_VERSION: ${{ inputs.core_nuget_version }}
  NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

jobs:
  update_cores:
    runs-on: ubuntu-latest
    outputs:
      release_branch: ${{steps.create_release_branch.outputs.release_branch}}
      new_tags: ${{steps.update_versions.outputs.new_tags}}
      updated_projects: ${{steps.update_versions.outputs.updated_projects}}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Update versions
        shell: pwsh
        run: |
          cd dotnet
          ./update_core_versions.ps1
          python updateChangelogAndProjectFiles.py
      - name: Set release branch
        shell: bash
        run: |
          RELEASE_BRANCH=PR_RELEASE_$GITHUB_SHA
          echo "release_branch=$RELEASE_BRANCH" >> $GITHUB_OUTPUT
      - uses: actions/upload-artifact@v3
        with:
          name: PublishingFiles
          path: |
            dotnet/*.txt
            dotnet/*.json
            dotnet/CHANGELOG.md
            dotnet/Eyes.*/Eyes.*.csproj

  test:
    if: ${{ inputs.run_tests }}
    needs: [update_cores]
    uses: ./.github/workflows/dotnet-tests.yml
    secrets: inherit
    with:
      ref: ${{needs.update_cores.outputs.release_branch}}
      cross_platform: false
      generic: true
      core_version: ${{ inputs.core_version }}

  create_nugets:
    runs-on: ubuntu-latest
    needs: [update_cores, test]
    if: |
      always() &&
      (needs.update_cores.result == 'success') &&
      (needs.test.result == 'success' || needs.test.result == 'skipped')
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{needs.update_cores.outputs.release_branch}}
      - uses: actions/download-artifact@v3
        with:
          name: PublishingFiles
          path: dotnet
      - uses: actions/setup-dotnet@v2
        with:
          dotnet-version: "6.0"
      - name: Download cores
        shell: pwsh
        run: |
          cd dotnet
          ./download_cores.ps1
      - name: Create nugets
        shell: pwsh
        run: |
          cd dotnet
          dotnet pack ./Eyes.Image.Core.DotNet/Eyes.Image.Core.DotNet.csproj
          dotnet pack ./Eyes.Images.DotNet/Eyes.Images.DotNet.csproj
          dotnet pack ./Eyes.Appium.DotNet/Eyes.Appium.DotNet.csproj
          dotnet pack ./Eyes.Playwright.DotNet/Eyes.Playwright.DotNet.csproj
          dotnet pack ./Eyes.Selenium.DotNet/Eyes.Selenium.DotNet.csproj
          dotnet pack ./Eyes.Selenium4.DotNet/Eyes.Selenium4.DotNet.csproj
      - name: Store Nugets
        uses: actions/upload-artifact@v3
        with:
          name: Nugets
          path: dotnet/PackagesOutput

  test_nugets:
    if: |
      always() &&
      (needs.create_nugets.result == 'success')
    needs: [create_nugets]
    uses: ./.github/workflows/dotnet-platform-tests.yml
    secrets: inherit
    with:
      ref: ${{needs.update_cores.outputs.release_branch}}

  release:
    if: |
      always() &&
      (needs.test_nugets.result == 'success')
    needs: [test_nugets]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{needs.update_cores.outputs.release_branch}}
      - uses: actions/download-artifact@v3
        with:
          name: PublishingFiles
          path: dotnet
      - name: Update SCM
        id: create_release_branch
        shell: bash
        run: |
          cd dotnet
          RELEASE_BRANCH=PR_RELEASE_$GITHUB_SHA
          git config --local user.email "action-queue@applitools.com"
          git config --local user.name "queue-bot"
          git checkout -b $RELEASE_BRANCH
          git add */*.csproj CHANGELOG.md
          git commit -m 'Updated CHANGELOG and bumped versions.'
          git push origin HEAD:$RELEASE_BRANCH
      - uses: actions/setup-dotnet@v2
        with:
          dotnet-version: "6.0"
      - uses: actions/download-artifact@v3
        with:
          name: Nugets
          path: dotnet/PackagesOutput
      - name: Upload nugets
        shell: pwsh
        run: |
          cd dotnet
          dotnet nuget push ./PackagesOutput/*.nupkg --source https://api.nuget.org/v3/index.json --api-key ${env:NUGET_API_KEY} --skip-duplicate
      - name: Create PR
        shell: bash
        run: |
          cd dotnet
          hub pull-request -h "PR_RELEASE_$GITHUB_SHA" -F NEW_TAGS.txt
      - name: Send update notice
        shell: bash
        run: |
          cd dotnet
          chmod +x ./sendMail.sh && ./sendMail.sh